// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = upc * sku;
    const productNotes = "Best beans for Espresso"
    let productPrice = web3.utils.toWei('1', 'ether');
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
        let eventEmitted = false;

    // Mark an item as Harvested by calling function harvestItem()
        const result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');

    // Get the events emitted during the transaction
        const events = result.logs;

    // Check if the Harvested event was emitted
        events.forEach(event => {
            if (event.event === 'Harvested') {
                eventEmitted = true;
            }
        });

    // Assert that the event was emitted
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });




   // 2nd Test
it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 0, 'Error: Item should be in Harvested state initially');

    // Mark an item as Processed by calling function processItem()
    const result = await supplyChain.processItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Processed event was emitted
    events.forEach(event => {
        if (event.event === 'Processed') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
});



   // 3rd Test
it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 1, 'Error: Item should be in Processed state initially');

    // Mark an item as Packed by calling function packItem()
    const result = await supplyChain.packItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Packed event was emitted
    events.forEach(event => {
        if (event.event === 'Packed') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
});

    

   // 4th Test
it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 2, 'Error: Item should be in packed state initially');

    // Mark an item as ForSale by calling function sellItem()
    const result = await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the ForSale event was emitted
    events.forEach(event => {
        if (event.event === 'ForSale') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
});


    // 5th Test
it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 3, 'Error: Item should be in For Sale state initially');

    // Mark an item as Sold by calling function buyItem()
    const result = await supplyChain.buyItem(upc, { from: distributorID, value: web3.utils.toWei('1', 'ether') });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID'); // Change this line
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item State');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Sold event was emitted
    events.forEach(event => {
        if (event.event === 'Sold') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
});


    // 6th Test
it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 4, 'Error: Item should be in bought state initially');

    // Mark an item as Shipped by calling function shipItem()
    const result = await supplyChain.shipItem(upc, { from: distributorID });

    // Add the distributor to the list
    await supplyChain.addDistributor(distributorID, { from: ownerID });
    

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID'); // Change this line
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item State');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Shipped event was emitted
    events.forEach(event => {
        if (event.event === 'Shipped') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
});

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 5, 'Error: Item should be in bought state initially');

    // Add the retailer to the list
    await supplyChain.addRetailer(retailerID, { from: ownerID });

    // Mark an item as Shipped by calling function shipItem()
    const result = await supplyChain.receiveItem(upc, { from: retailerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID'); // Change this line
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid DistributorID');
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Shipped event was emitted
    events.forEach(event => {
        if (event.event === 'Received') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Retrieve the initial item state
    const initialItemState = await supplyChain.fetchItemBufferTwo.call(upc);
    assert.equal(initialItemState[5].toNumber(), 6, 'Error: Item should be in bought state initially');

    // Mark an item as Shipped by calling function shipItem()
    const result = await supplyChain.purchaseItem(upc, { from: consumerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID'); // Change this line
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid DistributorID');
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid retailerID');

    // Get the events emitted during the transaction
    const events = result.logs;

    // Check if the Purchased event was emitted
    events.forEach(event => {
        if (event.event === 'Purchased') {
            eventEmitted = true;
        }
    });

    // Assert that the event was emitted
    assert.equal(eventEmitted, true, 'Invalid event emitted');
        
    })    

    // 9th Test
it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

    //Verify result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID'); // Change this line
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

    // Print the result set to the terminal
    console.log("SKU:", resultBufferOne[0].toNumber());
    console.log("UPC:", resultBufferOne[1].toNumber());
    console.log("Owner ID:", resultBufferOne[2]);
    console.log("Origin Farmer ID:", resultBufferOne[3]);
    console.log("Farm name:", resultBufferOne[4]);
    console.log("Farm information:", resultBufferOne[5]);
    console.log("Farm latitude:", resultBufferOne[6]);
    console.log("Farm longitude:", resultBufferOne[7]);
});


    // 10th Test
it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify result set
    assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID'); 
    assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid product Notes');
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid product Price');
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
    assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid DistributorID');
    assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID');
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID');

    // Print the result set to the terminal
    console.log("SKU:", resultBufferTwo[0].toNumber());
    console.log("UPC:", resultBufferTwo[1].toNumber());
    console.log("Product ID:", resultBufferTwo[2].toNumber());
    console.log("Product Notes:", resultBufferTwo[3]);
    console.log("Product Price:", resultBufferTwo[4]);
    console.log("Item State:", resultBufferTwo[5]);
    console.log("distributor:", resultBufferTwo[6]);
    console.log("retailerID:", resultBufferTwo[7]);
    console.log("consumerID:", resultBufferTwo[8]);
});


});

